#!@@PERL@@
use strict;
use warnings;
use DBI;
use JSON;
use Log::Handler;
use Bloonix::REST;
use Bloonix::Config;
use Getopt::Long qw(:config no_ignore_case);
use base qw(Bloonix::Accessor);

__PACKAGE__->mk_accessors(qw/rest json log dbh/);
__PACKAGE__->run();

sub run {
    my $class = shift;
    my $self = bless { }, $class;

    my $help = 0;
    $self->{host} = [];
    $self->{type} = [];
    $self->{really_delete} = 0;
    $self->{config_file} = "@@CONFDIR@@/bloonix/server/main.conf";

    GetOptions(
        "H|host=s" => $self->{host},
        "t|type=s" => $self->{type},
        "r|really-delete" => \$self->{really_delete},
        "c|config-file=s" => \$self->{config_file},
        "h|help" => \$help
    ) or exit 1;

    if ($help) {
        print "\nUsage: $0 [ OPTIONS ]\n\n";
        print "Options:\n\n";
        print "-H, --host <host-id>\n";
        print "    The host id to delete the data. If no host-id is passed\n";
        print "    then all hosts are processed.\n";
        print "-t, --type <stats|event|result>\n";
        print "    What type of data to delete.\n";
        print "    By default all data will be deleted.\n";
        print "-r, --really-delete\n";
        print "    Set this option if you want to really delete\n";
        print "    the data. Otherwise only debug messages are print.\n";
        print "-c, --config-file\n";
        print "    The configuration file of the bloonix server.\n";
        print "    Default: @@CONFDIR@@/bloonix/server/main.conf\n";
        print "-h, --help\n";
        print "    Print the help.\n";
        print "\n";
        exit 0;
    }

    if (!@{$self->{type}}) {
        push @{$self->{type}}, qw(stats event results);
    }

    foreach my $type (@{$self->{type}}) {
        if ($type !~ /^(stats|event|results)\z/) {
            print "Invalid value for parameter --type\n";
            exit 1;
        }
    }

    $self->{type} = join(",", @{$self->{type}});

    $self->{config} = Bloonix::Config->parse(
        $self->{config_file}
    );

    $self->{log} = Log::Handler->new(
        screen => {
            maxlevel => "info"
        }
    );

    $self->{rest} = Bloonix::REST->new(
        $self->{config}->{elasticsearch}
    );

    $self->{json} = JSON->new();

    $self->connect_database;
    $self->get_indices;
    $self->delete_data;
    $self->disconnect_database;
    $self->delete_empty_indices;
}

sub connect_database {
    my $self = shift;
    my $config = $self->{config}->{database};

    $self->{dbh} = DBI->connect(
        join(";",
            "DBI:$config->{driver}:database=$config->{database}",
            "host=$config->{host}",
            "port=$config->{port}",
        ),
        $config->{user},
        $config->{password},
        { RaiseError => 1 },
    );
}

sub disconnect_database {
    my $self = shift;

    $self->dbh->disconnect;
}

sub delete_data {
    my $self = shift;

    my $stmt = join(" ",
        "select host.id, host.hostname, host.ipaddr, host.data_retention, company.data_retention as company_data_retention",
        "from host",
        "inner join company on host.company_id = company.id"
    );

    my @bind;

    if (@{$self->{host}}) {
        $stmt .= " where id host.in (". join(",", map {"?"} @{$self->{host}}) .")";
        push @bind, @{$self->{host}};
    }

    my $sth = $self->dbh->prepare($stmt);
    $sth->execute(@bind);

    while (my $host = $sth->fetchrow_hashref) {
        $self->log->notice("--- start processing host $host->{id} type $self->{type} ---");
        $self->delete($host);
    }

    $sth->finish;
}

sub delete {
    my ($self, $host) = @_;

    my $data_retention = $host->{data_retention} > $host->{company_data_retention}
        ? $host->{company_data_retention}
        : $host->{data_retention};

    my $time = $self->data_retention_time($data_retention);

    $self->log->notice(
        "processing $host->{id} with a data retention of $data_retention days"
    );

    my $total = $self->get_total_size($time, $host);

    $self->log->notice(
        "found $total documents for host $host->{id} that are older than",
        scalar localtime($time/1000)
    );

    if ($total == 0) {
        return;
    }

    foreach my $index (@{$self->{indices}}) {
        my $type = $self->{type};

        $self->log->notice(
            "delete data from index $index for host $host->{id}",
            "older than", $self->datestamp($time)
        );

        if (!$self->{really_delete}) {
            $self->log->notice("test run - skip deletion");
            next;
        }

        my @request = (
            path => "$index/$type/_query",
            data => {
                query => {
                    filtered => {
                        query => { term => { host_id => $host->{id} } },
                        filter => { range => { time => { lt => $time } } }
                    }
                }
            }
        );

        my $result = $self->rest->delete(@request);

        if (!$result) {
            $self->log->dump(error => \@request);
            $self->log->die(error => $self->rest->errstr);
        }

        $self->log->notice("deletion was successful for host $host->{id}");
        $self->log->notice("run the optimizer for index $index");

        $self->rest->post(
            path => "$index/_optimize?only_expunge_deletes"
        );
    }

    if (!$self->{really_delete}) {
        return;
    }

    $total -= $self->get_total_size($time, $host);
    $self->log->notice("about $total documents deleted for host $host->{id}");
}

sub delete_empty_indices {
    my $self = shift;
    my $count = 0;

    $self->log->notice("--- check for empty indices ---");

    foreach my $index (@{$self->{indices}}) {
        my $result = $self->rest->get(
            path => "$index/_search",
            data => { size => 0 }
        ) or die $self->rest->errstr;

        if (defined $result->{hits}->{total} && $result->{hits}->{total} == 0) {
            $self->log->notice("delete index $index");
            $count++;

            if ($self->{really_delete}) {
                $self->rest->delete(path => $index)
                    or die $self->rest->errstr;
            }
        } else {
            $self->log->notice(
                "index $index has", $result->{hits}->{total}, "documents"
            );
        }
    }

    if ($count == 0) {
        $self->log->notice("$count indices deleted");
    }
}

sub data_retention_time {
    my ($self, $data_retention) = @_;

    my $hold = $data_retention * 86400;

    return (time - $hold) * 1000;
}

sub get_indices {
    my $self = shift;

    my $result = $self->rest->get(path => "_aliases")
        or die $self->rest->errstr;

    my @indices;

    foreach my $index (sort keys %$result) {
        if ($index =~ /^bloonix\-\d\d\d\d\-\d\d\z/) {
            push @indices, $index;
        }
    }

    $self->{indices} = \@indices;
}

sub get_total_size {
    my ($self, $time, $host) = @_;
    my $type = $self->{type};
    my $total = 0;

    foreach my $index (@{$self->{indices}}) {
        $self->log->notice("get total size of index $index for host $host->{id}");

        my $data = {
            from => 0,
            size => 0,
            filter => {
                and => [
                    { term => { host_id => $host->{id} } },
                    { range => { time => { lt => $time } } }
                ]
            }
        };

        #print JSON->new->encode($data);

        my $result = $self->rest->get(
            path => "$index/$type/_search",
            data => $data
        ) or die $self->rest->errstr;

        $total += $result->{hits}->{total};
    }

    return $total;
}

sub datestamp {
    my ($self, $time) = @_;
    $time = do { $time =~ /^(\d{10})/; $1 };
    my @time = (localtime($time))[reverse 0..5];
    $time[0] += 1900;
    $time[1] += 1;
    return sprintf "%04d-%02d-%02d", @time[0..2];
}
