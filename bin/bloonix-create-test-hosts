#!/usr/bin/perl

##############################
# Package Bloonix::CreateHosts
##############################

package Bloonix::CreateHosts;

use strict;
use warnings;
use Bloonix::REST;
use Data::Dumper;
use Log::Handler;
use POSIX qw(:sys_wait_h getgid getuid setgid setuid);
use base qw(Bloonix::Accessor);

__PACKAGE__->mk_accessors(qw/
    admin_username admin_password classes contactgroup_name company_id
    company_name contactgroup_id group_ids group_name host host_id
    hosts_per_worker log num_groups num_hosts password pid proto rest
    user_id user_login_name user_name user_password worker
    x y z
/);

sub run {
    my ($class, %opts) = @_;
    my $self = bless \%opts, $class;

    $self->init;
    $self->login(
        $self->admin_username,
        $self->admin_password
    );
    $self->create_bloonix_env;
    $self->run_daemon;
    $self->logout;
}

sub init {
    my $self = shift;

    $self->calculate_hosts_per_worker;
    $self->init_classes;
    $self->init_logger;
    $self->group_ids([]);
    $self->group_name("Administration");
    $self->contactgroup_name("Administration");
    $self->pid({});
    $self->init_rest_api;
    $self->x(1);
    $self->y(0);
    $self->z(0);

    if ($self->company_name eq "auto") {
        $self->company_name(
            "Company Test ". $self->pwgen(10)
        )
    }
}

sub calculate_hosts_per_worker {
    my $self = shift;

    $self->hosts_per_worker(
         int($self->num_hosts / $self->worker)
    );
}

sub init_classes {
    my $self = shift;

    $self->classes([
        "/Server/Linux/Debian/Lenny",
        "/Server/Linux/Debian/Wheezy",
        "/Server/Linux/Debian/Jessie",
        "/Server/Linux/CentOS/5",
        "/Server/Linux/CentOS/6",
        "/Server/Linux/CentOS/7",
        "/Server/Linux/openSUSE/11",
        "/Server/Linux/openSUSE/12",
        "/Server/Linux/openSUSE/13",
        "/Server/Linux/Ubuntu/Lucy",
        "/Server/Linux/Ubuntu/Precise",
        "/Server/Linux/Ubuntu/Trusty",
    ]);
}

sub init_logger {
    my $self = shift;

    $self->log(Log::Handler->new);
    $self->log->add(
        screen => {
            maxlevel => "info"
        }
    );

    $SIG{__DIE__} = sub { $self->log->trace(error => @_) };
}

sub init_rest_api {
    my $self = shift;

    $self->rest(
        Bloonix::REST->new(
            host => $self->host,
            proto => $self->proto
        )
    ) or die $!;
}

sub login {
    my ($self, $username, $password) = @_;

    $self->log->info("login as $username");

    my $res = $self->request(
        path => "/login",
        data => {
            username => $username,
            password => $password
        }
    );

    if (!$res->{data}->{sid}) {
        die Dumper($res);
    }

    $self->rest->set_header(
        Cookie => join("=", sid => $res->{data}->{sid})
    );
}

sub logout {
    my $self = shift;

    $self->log->info("logout");
    $self->request(path => "/logout");
}

sub create_bloonix_env {
    my $self = shift;

    $self->create_company;
    $self->create_user;
    $self->login($self->user_login_name, $self->user_password);
    $self->create_groups;
    $self->add_user_to_groups;
    $self->create_contactgroup;
}

sub run_daemon {
    my $self = shift;

    $SIG{CHLD} = sub { $self->sig_child_handler };

    for (1 .. $self->worker) {
        my $pid = fork;

        if ($pid) {
            $self->log->info("forked pid $pid");
            $self->pid->{$pid} = $pid;
        } else {
            eval { $self->run_worker };
            exit 0;
        }
    }

    $self->wait_for_worker;
}

sub wait_for_worker {
    my $self = shift;
    my $pids = $self->{pid};

    while (scalar keys %$pids) {
        $self->log->info(scalar keys %$pids, "worker running");
        sleep 10;
    }
}

sub sig_child_handler {
    my $self = shift;

    # Reap children.
    while ((my $child = waitpid(-1, WNOHANG)) > 0) {
        $self->log->info("child $child died: $?");
        delete $self->pid->{$child};
    }

    $SIG{CHLD} = sub { $self->sig_child_handler(@_) };
}

sub run_worker {
    my $self = shift;

    $self->log->info(
        "worker $$ started to create",
        $self->hosts_per_worker,
        "hosts"
    );

    $self->create_hosts;
}

sub create_company {
    my $self = shift;

    $self->log->info("create company", $self->company_name);

    my $res = $self->create(
        path => "/administration/companies/create",
        data => {
            active => 1,
            company => $self->company_name,
            email => 'test@bloonix.de',
            max_hosts => 1000000,
            max_services => 10000000,
            max_services_per_host => 100,
            manage_templates => 1,
            manage_contacts => 1,
            sla => int(rand(5)),
            surname => "Bloonix",
            name => "Test"
        }
    );

    $self->company_id($res->{data}->{id});
}

sub create_user {
    my $self = shift;

    $self->user_name(
        $self->pwgen(10)
    );

    $self->user_login_name(
        $self->user_name . '@bloonix.de'
    );

    $self->user_password(
        $self->pwgen(30)
    );

    $self->log->info(
        "create user", $self->user_login_name,
        "with password", $self->user_password
    );

    my $res = $self->create(
        path => "/administration/users/create",
        data => {
            company_id => $self->company_id,
            username => $self->user_login_name,
            password => $self->user_password,
            name => $self->user_name,
            role => "operator",
            password_changed => 1,
            manage_contacts => 1,
            manage_templates => 1
        }
    );

    $self->user_id($res->{data}->{id});
}

sub create_groups {
    my $self = shift;

    $self->log->info("create group", $self->group_name);

    foreach my $i (1 .. $self->num_groups) {
        my $res = $self->create(
            path => "/administration/groups/create",
            data => {
                groupname => $self->group_name . " $i",
                description => "Test"
            }
        );

        push @{$self->group_ids}, $res->{data}->{id};
    }
}

sub add_user_to_groups {
    my $self = shift;

    foreach my $group_id (@{$self->group_ids}) {
        my $res = $self->request(
            path => "/administration/groups/". $group_id ."/members/users/add/",
            data => {
                token => $self->get_token,
                user_id => $self->user_id,
                create_service => 1,
                update_service => 1,
                delete_service => 1
            }
        );

        if ($res->{status} ne "ok") {
            die Dumper($res);
        }
    }
}

sub create_contactgroup {
    my $self = shift;

    $self->log->info("create contactgroup", $self->contactgroup_name);

    my $res = $self->create(
        path => "/contactgroups/create",
        data => {
            name => $self->contactgroup_name,
            description => "Test"
        }
    );

    $self->contactgroup_id($res->{data}->{id});
}

sub create_hosts {
    my $self = shift;

    for my $i (1 .. $self->hosts_per_worker) {
        $self->create_host($i);
        $self->create_services;
    }
}

sub create_host {
    my ($self, $i) = @_;
    my $hostname = join(".", $$, $i, "bloonix", "de");

    $self->log->info("create host $hostname");

    my $res = $self->create(
        path => "/administration/hosts/create",
        data => {
            hostname => $hostname,
            password => $self->pwgen(32),
            ipaddr => $self->generate_ip,
            description => "Test host",
            group_id => [ $self->get_next_group ],
            host_class => $self->get_random_class,
            contactgroup_id => [ $self->contactgroup_id ]
        },
    );

    $self->host_id($res->{data}->{id});
}

sub get_random_class {
    my $self = shift;
    my $num_classes = scalar @{ $self->classes };
    my $num = int(rand($num_classes));
    if (!$num) {
        $num = 1;
    }
    return $self->classes->[$num];
}

sub generate_ip {
    my $self = shift;

    $self->x( $self->x + 1);

    if ($self->x == 255) {
        $self->x(1);
        $self->y( $self->y + 1 );

        if ($self->y == 256) {
            $self->y(0);
            $self->z( $self->z + 1 );
        }
    }

    return join(".", 127, $self->z, $self->y, $self->x);
}

sub get_next_group {
    my $self = shift;
    my $groups = $self->group_ids;
    my $group = shift @$groups;
    push @$groups, $group;
    return $group;
}

sub create_services {
    my ($self, $host_id) = @_;

    $self->create_check_cpustat;
    $self->create_check_diskusage;
    $self->create_check_loadavg;
    $self->create_check_memstat;
    $self->create_check_netstat;
    $self->create_check_netstat_port;
    $self->create_check_open_files;
    $self->create_check_pgswstat;
    $self->create_check_procstat;
    $self->create_check_sockstat;
}

sub create_check_cpustat {
    my $self = shift;

    $self->log->info("create check cpustat");

    $self->create_check(
        service_name => "CPU check",
        description => "Linux CPU statistics",
        agent_id => "localhost",
        plugin_id => 18,
        command_options => {
            warning => [ "iowait:ge:30" ],
            critical => [ "iowait:ge:50" ]
        },
    );
}

sub create_check_diskusage {
    my $self = shift;

    $self->log->info("create check diskusage");

    $self->create_check(
        service_name => "Diskusage check /",
        description => "Linux disk usage",
        agent_id => "localhost",
        plugin_id => 19,
        command_options => {
            mountpoint => "/",
            warning => [ "usageper:ge:80" ],
            critical => [ "usageper:ge:85" ]
        },
    );
}

sub create_check_loadavg {
    my $self = shift;

    $self->log->info("create check loadavg");

    $self->create_check(
        service_name => "Load average check",
        description => "Linux load average",
        agent_id => "localhost",
        plugin_id => 24,
        command_options => {
            warning => [ "avg5:ge:24" ],
            critical => [ "avg5:ge:48" ]
        },
    );
}

sub create_check_memstat {
    my $self = shift;

    $self->log->info("create check memstat");

    $self->create_check(
        service_name => "Memory check",
        description => "Linux memory statistics",
        agent_id => "localhost",
        plugin_id => 26,
        command_options => {
            warning => [ "memusedper:ge:80" ],
            critical => [ "memusedper:ge:85" ]
        },
    );
}

sub create_check_netstat {
    my $self = shift;

    $self->log->info("create check netstat");

    $self->create_check(
        service_name => "Netstat check",
        description => "Linux netstat statistics",
        agent_id => "localhost",
        plugin_id => 28,
        command_options => {
        },
    );
}

sub create_check_netstat_port {
    my $self = shift;

    $self->log->info("create check netstat port");

    $self->create_check(
        service_name => "Netstat port check 443",
        description => "Linux netstat statistics by port",
        agent_id => "localhost",
        plugin_id => "29",
        command_options => {
            port => 443
        },
    );
}

sub create_check_open_files {
    my $self = shift;

    $self->log->info("create check open files");

    $self->create_check(
        service_name => "Open files check",
        description => "Linux file statistics",
        agent_id => "localhost",
        plugin_id => 33,
        command_options => {
            warning => 100,
            critical => 80
        },
    );
}

sub create_check_pgswstat {
    my $self = shift;

    $self->log->info("create check pgswstat");

    $self->create_check(
        service_name => "Paging/Swaping check",
        description => "Linux paging/swapping statistics",
        agent_id => "localhost",
        plugin_id => 34,
        command_options => {
            warning => [ "pswpout:ge:10240" ],
            critical => [ "pswpout:ge:20480" ]
        },
    );
}

sub create_check_procstat {
    my $self = shift;

    $self->log->info("create check procstat");

    $self->create_check(
        service_name => "Process status check",
        description => "Linux process statistics",
        agent_id => "localhost",
        plugin_id => 36,
        command_options => {
            warning => [ "new:ge:20" ],
            critical => [ "new:ge:40" ]
        }
    );
}

sub create_check_sockstat {
    my $self = shift;

    $self->log->info("create check sockstat");

    $self->create_check(
        service_name => "Socket usage check",
        description => "Linux socket statistics",
        agent_id => "localhost",
        plugin_id => 40,
        command_options => {
            warning => [ "sockets:ge:2000" ],
            critical => [ "sockets:ge:3000" ]
        }
    );
}

sub create_check {
    my ($self, %data) = @_;

    $self->create(
        path => "/hosts/". $self->host_id ."/services/create",
        data => \%data
    );
}

sub request {
    my ($self, %req) = @_;

    $self->log->info("request $req{path}");
    my $res = $self->rest->post(%req);

    if (ref $res ne "HASH") {
        die Dumper($res);
    }

    return $res;
}

sub create {
    my ($self, %req) = @_;

    $req{data}{token} = $self->get_token;

    my $res = $self->request(%req);

    if (!$res->{data}->{id}) {
        die Dumper($res);
    }

    return $res;
}

sub get_token {
    my $self = shift;

    my $res = $self->request(path => "/token/csrf");

    return $res->{data};
}

sub pwgen {
    my ($self, $num) = @_;
    $num ||= 20;

    my @char = ("a".."z", "A".."Z", 0..9);
    my $len  = scalar @char;
    my $str  = "";

    for my $i (1..$num) {
        my $n = int(rand($len));
        $str .= $char[$n];
    }

    return $str;
}

##############################
# Package main
##############################

package main;

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);

# Login data
my $username = "admin";
my $password = $ENV{BLOONIX_PASSWORD};
my $host = $ENV{BLOONIX_HOSTNAME};
my $company_name = "auto";
my $num_hosts;
my $num_groups = 10;
my $worker;

GetOptions(
    "username=s" => \$username,
    "password=s" => \$password,
    "host=s" => \$host,
    "company-name=s" => \$company_name,
    "worker=s" => \$worker,
    "num-hosts=s" => \$num_hosts,
    "num-groups=s" => \$num_groups
) or exit 1;

if (!$num_hosts) {
    die "missing mandatory parameter --num-hosts\n";
}

if ($num_hosts !~ /^[1-9]\d{0,6}\z/) {
    die "invalid value for parameter --num-hosts (max 9999999)\n";
}

if ($num_hosts < 100) {
    die "please set --num-hosts at least to 100\n";
}

if (!$worker) {
    die "missing mandatory parameter --worker\n";
}

if ($worker !~ /^[1-9]\d{0,1}\z/) {
    die "invalid value for parameter --worker (max 99)\n";
}

# Run Bloonix run :-)
Bloonix::CreateHosts->run(
    company_name => $company_name,
    admin_username => $username,
    admin_password => $password,
    host => $host,
    proto => "https",
    worker => $worker,
    num_hosts => $num_hosts,
    num_groups => $num_groups
);

1;
